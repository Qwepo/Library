// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: library.proto

package librarypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BooksClient is the client API for Books service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksClient interface {
	GetBooksByAuthor(ctx context.Context, in *AuthorEntity, opts ...grpc.CallOption) (*GetBooksByAuthorResponse, error)
}

type booksClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksClient(cc grpc.ClientConnInterface) BooksClient {
	return &booksClient{cc}
}

func (c *booksClient) GetBooksByAuthor(ctx context.Context, in *AuthorEntity, opts ...grpc.CallOption) (*GetBooksByAuthorResponse, error) {
	out := new(GetBooksByAuthorResponse)
	err := c.cc.Invoke(ctx, "/api.Books/GetBooksByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServer is the server API for Books service.
// All implementations must embed UnimplementedBooksServer
// for forward compatibility
type BooksServer interface {
	GetBooksByAuthor(context.Context, *AuthorEntity) (*GetBooksByAuthorResponse, error)
	mustEmbedUnimplementedBooksServer()
}

// UnimplementedBooksServer must be embedded to have forward compatible implementations.
type UnimplementedBooksServer struct {
}

func (UnimplementedBooksServer) GetBooksByAuthor(context.Context, *AuthorEntity) (*GetBooksByAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBooksServer) mustEmbedUnimplementedBooksServer() {}

// UnsafeBooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksServer will
// result in compilation errors.
type UnsafeBooksServer interface {
	mustEmbedUnimplementedBooksServer()
}

func RegisterBooksServer(s grpc.ServiceRegistrar, srv BooksServer) {
	s.RegisterService(&Books_ServiceDesc, srv)
}

func _Books_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Books/GetBooksByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).GetBooksByAuthor(ctx, req.(*AuthorEntity))
	}
	return interceptor(ctx, in, info, handler)
}

// Books_ServiceDesc is the grpc.ServiceDesc for Books service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Books_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Books",
	HandlerType: (*BooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _Books_GetBooksByAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}

// AuthorsClient is the client API for Authors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorsClient interface {
	GetAuthorByBook(ctx context.Context, in *BookEntity, opts ...grpc.CallOption) (*GetAuthorByBookResponse, error)
}

type authorsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorsClient(cc grpc.ClientConnInterface) AuthorsClient {
	return &authorsClient{cc}
}

func (c *authorsClient) GetAuthorByBook(ctx context.Context, in *BookEntity, opts ...grpc.CallOption) (*GetAuthorByBookResponse, error) {
	out := new(GetAuthorByBookResponse)
	err := c.cc.Invoke(ctx, "/api.Authors/GetAuthorByBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorsServer is the server API for Authors service.
// All implementations must embed UnimplementedAuthorsServer
// for forward compatibility
type AuthorsServer interface {
	GetAuthorByBook(context.Context, *BookEntity) (*GetAuthorByBookResponse, error)
	mustEmbedUnimplementedAuthorsServer()
}

// UnimplementedAuthorsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorsServer struct {
}

func (UnimplementedAuthorsServer) GetAuthorByBook(context.Context, *BookEntity) (*GetAuthorByBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorByBook not implemented")
}
func (UnimplementedAuthorsServer) mustEmbedUnimplementedAuthorsServer() {}

// UnsafeAuthorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorsServer will
// result in compilation errors.
type UnsafeAuthorsServer interface {
	mustEmbedUnimplementedAuthorsServer()
}

func RegisterAuthorsServer(s grpc.ServiceRegistrar, srv AuthorsServer) {
	s.RegisterService(&Authors_ServiceDesc, srv)
}

func _Authors_GetAuthorByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorsServer).GetAuthorByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authors/GetAuthorByBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorsServer).GetAuthorByBook(ctx, req.(*BookEntity))
	}
	return interceptor(ctx, in, info, handler)
}

// Authors_ServiceDesc is the grpc.ServiceDesc for Authors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Authors",
	HandlerType: (*AuthorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorByBook",
			Handler:    _Authors_GetAuthorByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}
